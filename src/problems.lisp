(in-package :euler)

(defun problem-10 ()
  ;; The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  ;; Find the sum of all the primes below two million.
  (summation (sieve 2000000)))

(defun problem-11 ()
  ;; In the 20×20 grid below, four numbers along a diagonal line have been marked
  ;; in red.
  ;;
  ;; The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
  ;;
  ;; What is the greatest product of four adjacent numbers in the same direction
  ;; (up, down, left, right, or diagonally) in the 20×20 grid?
  (let ((grid
          #2A((08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08)
              (49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00)
              (81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65)
              (52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91)
              (22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80)
              (24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50)
              (32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70)
              (67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21)
              (24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72)
              (21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95)
              (78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92)
              (16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57)
              (86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58)
              (19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40)
              (04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66)
              (88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69)
              (04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36)
              (20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16)
              (20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54)
              (01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48))))
    (max
      ;; horizontal
      (iterate (for-nested ((row :from 0 :below 20)
                            (col :from 0 :below 16)))
               (maximize (* (aref grid row (+ 0 col))
                            (aref grid row (+ 1 col))
                            (aref grid row (+ 2 col))
                            (aref grid row (+ 3 col)))))
      ;; vertical
      (iterate (for-nested ((row :from 0 :below 16)
                            (col :from 0 :below 20)))
               (maximize (* (aref grid (+ 0 row) col)
                            (aref grid (+ 1 row) col)
                            (aref grid (+ 2 row) col)
                            (aref grid (+ 3 row) col))))
      ;; backslash \
      (iterate (for-nested ((row :from 0 :below 16)
                            (col :from 0 :below 16)))
               (maximize (* (aref grid (+ 0 row) (+ 0 col))
                            (aref grid (+ 1 row) (+ 1 col))
                            (aref grid (+ 2 row) (+ 2 col))
                            (aref grid (+ 3 row) (+ 3 col)))))
      ;; slash /
      (iterate (for-nested ((row :from 3 :below 20)
                            (col :from 0 :below 16)))
               (maximize (* (aref grid (- row 0) (+ 0 col))
                            (aref grid (- row 1) (+ 1 col))
                            (aref grid (- row 2) (+ 2 col))
                            (aref grid (- row 3) (+ 3 col))))))))

(defun problem-12 ()
  ;; The sequence of triangle numbers is generated by adding the natural
  ;; numbers. So the 7th triangle number would be
  ;; 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  ;;
  ;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  ;;
  ;; Let us list the factors of the first seven triangle numbers:
  ;;
  ;;  1: 1
  ;;  3: 1,3
  ;;  6: 1,2,3,6
  ;; 10: 1,2,5,10
  ;; 15: 1,3,5,15
  ;; 21: 1,3,7,21
  ;; 28: 1,2,4,7,14,28
  ;;
  ;; We can see that 28 is the first triangle number to have over five divisors.
  ;;
  ;; What is the value of the first triangle number to have over five hundred
  ;; divisors?
  (iterate
    (for tri :key #'triangle :from 1)
    (finding tri :such-that (> (count-divisors tri) 500))))

(defun problem-13 ()
  ;; Work out the first ten digits of the sum of the following one-hundred
  ;; 50-digit numbers.
  (-<> (read-all-from-file "data/013-numbers.txt")
    summation
    aesthetic-string
    (subseq <> 0 10)
    parse-integer
    (nth-value 0 <>)))

(defun problem-14 ()
  ;; The following iterative sequence is defined for the set of positive
  ;; integers:
  ;;
  ;;   n → n/2 (n is even)
  ;;   n → 3n + 1 (n is odd)
  ;;
  ;; Using the rule above and starting with 13, we generate the following
  ;; sequence:
  ;;
  ;;   13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
  ;;
  ;; It can be seen that this sequence (starting at 13 and finishing at 1)
  ;; contains 10 terms. Although it has not been proved yet (Collatz Problem),
  ;; it is thought that all starting numbers finish at 1.
  ;;
  ;; Which starting number, under one million, produces the longest chain?
  ;;
  ;; NOTE: Once the chain starts the terms are allowed to go above one million.
  (iterate (for i :from 1 :below 1000000)
           (finding i :maximizing #'collatz-length)))

(defun problem-15 ()
  ;; Starting in the top left corner of a 2×2 grid, and only being able to move
  ;; to the right and down, there are exactly 6 routes to the bottom right
  ;; corner.
  ;;
  ;; How many such routes are there through a 20×20 grid?
  (binomial-coefficient 40 20))

(defun problem-16 ()
  ;; 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
  ;;
  ;; What is the sum of the digits of the number 2^1000?
  (digital-sum (expt 2 1000)))

(defun problem-17 ()
  ;; If the numbers 1 to 5 are written out in words: one, two, three, four,
  ;; five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
  ;;
  ;; If all the numbers from 1 to 1000 (one thousand) inclusive were written out
  ;; in words, how many letters would be used?
  ;;
  ;; NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and
  ;; forty-two) contains 23 letters and 115 (one hundred and fifteen) contains
  ;; 20 letters. The use of "and" when writing out numbers is in compliance with
  ;; British usage, which is awful.
  (labels ((letters (n)
             (-<> n
               (format nil "~R" <>)
               (count-if #'alpha-char-p <>)))
           (has-british-and (n)
             (or (< n 100)
                 (zerop (mod n 100))))
           (silly-british-letters (n)
             (+ (letters n)
                (if (has-british-and n) 0 3))))
    (summation (irange 1 1000)
               :key #'silly-british-letters)))

(defun problem-18 ()
  ;; By starting at the top of the triangle below and moving to adjacent numbers
  ;; on the row below, the maximum total from top to bottom is 23.
  ;;
  ;;        3
  ;;       7 4
  ;;      2 4 6
  ;;     8 5 9 3
  ;;
  ;; That is, 3 + 7 + 4 + 9 = 23.
  ;;
  ;; Find the maximum total from top to bottom of the triangle below.
  ;;
  ;; NOTE: As there are only 16384 routes, it is possible to solve this problem
  ;; by trying every route. However, Problem 67, is the same challenge with
  ;; a triangle containing one-hundred rows; it cannot be solved by brute force,
  ;; and requires a clever method! ;o)
  (let ((triangle (iterate (for line :in-csv-file "data/018-triangle.txt"
                                :delimiter #\space
                                :key #'parse-integer)
                           (collect line))))
    (car (reduce (lambda (prev last)
                   (mapcar #'+
                           prev
                           (mapcar #'max last (rest last))))
                 triangle
                 :from-end t))))

(defun problem-19 ()
  ;; You are given the following information, but you may prefer to do some
  ;; research for yourself.
  ;;
  ;; 1 Jan 1900 was a Monday.
  ;; Thirty days has September,
  ;; April, June and November.
  ;; All the rest have thirty-one,
  ;; Saving February alone,
  ;; Which has twenty-eight, rain or shine.
  ;; And on leap years, twenty-nine.
  ;; A leap year occurs on any year evenly divisible by 4, but not on a century
  ;; unless it is divisible by 400.
  ;;
  ;; How many Sundays fell on the first of the month during the twentieth
  ;; century (1 Jan 1901 to 31 Dec 2000)?
  (iterate
    (for-nested ((year :from 1901 :to 2000)
                 (month :from 1 :to 12)))
    (counting (-<> (local-time:encode-timestamp 0 0 0 0 1 month year)
                local-time:timestamp-day-of-week
                zerop))))

(defun problem-20 ()
  ;; n! means n × (n − 1) × ... × 3 × 2 × 1
  ;;
  ;; For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
  ;; and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
  ;;
  ;; Find the sum of the digits in the number 100!
  (digital-sum (factorial 100)))

(defun problem-21 ()
  ;; Let d(n) be defined as the sum of proper divisors of n (numbers less than
  ;; n which divide evenly into n).
  ;;
  ;; If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair
  ;; and each of a and b are called amicable numbers.
  ;;
  ;; For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44,
  ;; 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4,
  ;; 71 and 142; so d(284) = 220.
  ;;
  ;; Evaluate the sum of all the amicable numbers under 10000.
  (summation (remove-if-not #'amicablep (range 1 10000))))

(defun problem-22 ()
  ;; Using names.txt, a 46K text file containing over five-thousand first names,
  ;; begin by sorting it into alphabetical order. Then working out the
  ;; alphabetical value for each name, multiply this value by its alphabetical
  ;; position in the list to obtain a name score.
  ;;
  ;; For example, when the list is sorted into alphabetical order, COLIN, which
  ;; is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So,
  ;; COLIN would obtain a score of 938 × 53 = 49714.
  ;;
  ;; What is the total of all the name scores in the file?
  (labels ((read-names ()
             (-<> "data/022-names.txt"
               parse-strings-file
               (sort <> #'string<)))
           (name-score (name)
             (summation name :key #'letter-number)))
    (iterate (for position :from 1)
             (for name :in (read-names))
             (summing (* position (name-score name))))))

(defun problem-23 ()
  ;; A perfect number is a number for which the sum of its proper divisors is
  ;; exactly equal to the number. For example, the sum of the proper divisors of
  ;; 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect
  ;; number.
  ;;
  ;; A number n is called deficient if the sum of its proper divisors is less
  ;; than n and it is called abundant if this sum exceeds n.
  ;;
  ;; As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest
  ;; number that can be written as the sum of two abundant numbers is 24. By
  ;; mathematical analysis, it can be shown that all integers greater than 28123
  ;; can be written as the sum of two abundant numbers. However, this upper
  ;; limit cannot be reduced any further by analysis even though it is known
  ;; that the greatest number that cannot be expressed as the sum of two
  ;; abundant numbers is less than this limit.
  ;;
  ;; Find the sum of all the positive integers which cannot be written as the
  ;; sum of two abundant numbers.
  (let* ((limit 28123)
         (abundant-numbers
           (make-hash-set :initial-contents
                          (remove-if-not #'abundantp (irange 1 limit)))))
    (flet ((abundant-sum-p (n)
             (iterate (for a :in-hashset abundant-numbers)
                      (when (hset-contains-p abundant-numbers (- n a))
                        (return t)))))
      (summation (remove-if #'abundant-sum-p (irange 1 limit))))))

(defun problem-24 ()
  ;; A permutation is an ordered arrangement of objects. For example, 3124 is
  ;; one possible permutation of the digits 1, 2, 3 and 4. If all of the
  ;; permutations are listed numerically or alphabetically, we call it
  ;; lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
  ;;
  ;; 012   021   102   120   201   210
  ;;
  ;; What is the millionth lexicographic permutation of the digits 0, 1, 2, 3,
  ;; 4, 5, 6, 7, 8 and 9?
  (-<> "0123456789"
    (gathering-vector (:size (factorial (length <>)))
      (map-permutations (compose #'gather #'parse-integer) <>
                        :copy nil))
    (sort <> #'<)
    (elt <> (1- 1000000))))

(defun problem-25 ()
  ;; The Fibonacci sequence is defined by the recurrence relation:
  ;;
  ;;   Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
  ;;
  ;; Hence the first 12 terms will be:
  ;;
  ;; F1 = 1
  ;; F2 = 1
  ;; F3 = 2
  ;; F4 = 3
  ;; F5 = 5
  ;; F6 = 8
  ;; F7 = 13
  ;; F8 = 21
  ;; F9 = 34
  ;; F10 = 55
  ;; F11 = 89
  ;; F12 = 144
  ;;
  ;; The 12th term, F12, is the first term to contain three digits.
  ;;
  ;; What is the index of the first term in the Fibonacci sequence to contain
  ;; 1000 digits?
  (iterate (for f :in-fibonacci t)
           (for i :from 1)
           (finding i :such-that (= 1000 (digits-length f)))))

(defun problem-26 ()
  ;; A unit fraction contains 1 in the numerator. The decimal representation of
  ;; the unit fractions with denominators 2 to 10 are given:
  ;;
  ;; 1/2	= 	0.5
  ;; 1/3	= 	0.(3)
  ;; 1/4	= 	0.25
  ;; 1/5	= 	0.2
  ;; 1/6	= 	0.1(6)
  ;; 1/7	= 	0.(142857)
  ;; 1/8	= 	0.125
  ;; 1/9	= 	0.(1)
  ;; 1/10	= 	0.1
  ;;
  ;; Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can
  ;; be seen that 1/7 has a 6-digit recurring cycle.
  ;;
  ;; Find the value of d < 1000 for which 1/d contains the longest recurring
  ;; cycle in its decimal fraction part.
  (iterate
    ;; 2 and 5 are the only primes that aren't coprime to 10
    (for i :in (set-difference (primes-below 1000) '(2 5)))
    (finding i :maximizing (multiplicative-order 10 i))))

(defun problem-27 ()
  ;; Euler discovered the remarkable quadratic formula:
  ;;
  ;;     n² + n + 41
  ;;
  ;; It turns out that the formula will produce 40 primes for the consecutive
  ;; integer values 0 ≤ n ≤ 39. However, when n=40, 40² + 40 + 41 = 40(40 + 1)
  ;; + 41 is divisible by 41, and certainly when n=41, 41² + 41 + 41 is clearly
  ;; divisible by 41.
  ;;
  ;; The incredible formula n² − 79n + 1601 was discovered, which produces 80
  ;; primes for the consecutive values 0 ≤ n ≤ 79. The product of the
  ;; coefficients, −79 and 1601, is −126479.
  ;;
  ;; Considering quadratics of the form:
  ;;
  ;;     n² + an + b, where |a| < 1000 and |b| ≤ 1000
  ;;
  ;;     where |n| is the modulus/absolute value of n
  ;;     e.g. |11| = 11 and |−4| = 4
  ;;
  ;; Find the product of the coefficients, a and b, for the quadratic expression
  ;; that produces the maximum number of primes for consecutive values of n,
  ;; starting with n=0.
  (flet ((primes-produced (a b)
           (iterate (for n :from 0)
                    (while (primep
                             (math n ^ 2 + a n + b)))
                    (counting t))))
    (iterate (for-nested ((a :from -999 :to 999)
                          (b :from -1000 :to 1000)))
             (finding (* a b) :maximizing (primes-produced a b)))))

(defun problem-28 ()
  ;; Starting with the number 1 and moving to the right in a clockwise direction
  ;; a 5 by 5 spiral is formed as follows:
  ;;
  ;; 21 22 23 24 25
  ;; 20  7  8  9 10
  ;; 19  6  1  2 11
  ;; 18  5  4  3 12
  ;; 17 16 15 14 13
  ;;
  ;; It can be verified that the sum of the numbers on the diagonals is 101.
  ;;
  ;; What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral
  ;; formed in the same way?
  (iterate (for size :from 1 :to 1001 :by 2)
           (summing (apply #'+ (number-spiral-corners size)))))

(defun problem-29 ()
  ;; Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
  ;;
  ;; 2²=4,  2³=8,   2⁴=16,  2⁵=32
  ;; 3²=9,  3³=27,  3⁴=81,  3⁵=243
  ;; 4²=16, 4³=64,  4⁴=256, 4⁵=1024
  ;; 5²=25, 5³=125, 5⁴=625, 5⁵=3125
  ;;
  ;; If they are then placed in numerical order, with any repeats removed, we
  ;; get the following sequence of 15 distinct terms:
  ;;
  ;; 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
  ;;
  ;; How many distinct terms are in the sequence generated by a^b for
  ;; 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
  (length (iterate (for-nested ((a :from 2 :to 100)
                                (b :from 2 :to 100)))
                   (adjoining (expt a b)))))

(defun problem-30 ()
  ;; Surprisingly there are only three numbers that can be written as the sum of
  ;; fourth powers of their digits:
  ;;
  ;; 1634 = 1⁴ + 6⁴ + 3⁴ + 4⁴
  ;; 8208 = 8⁴ + 2⁴ + 0⁴ + 8⁴
  ;; 9474 = 9⁴ + 4⁴ + 7⁴ + 4⁴
  ;;
  ;; As 1 = 1⁴ is not a sum it is not included.
  ;;
  ;; The sum of these numbers is 1634 + 8208 + 9474 = 19316.
  ;;
  ;; Find the sum of all the numbers that can be written as the sum of fifth
  ;; powers of their digits.
  (flet ((maximum-sum-for-digits (n)
           (* (expt 9 5) n))
         (digit-power-sum (n)
           (summation (digits n) :key (rcurry #'expt 5))))
    (iterate
      ;; We want to find a limit N that's bigger than the maximum possible sum
      ;; for its number of digits.
      (with limit = (iterate (for digits :from 1)
                             (for n = (expt 10 digits))
                             (while (< n (maximum-sum-for-digits digits)))
                             (finally (return n))))
      ;; Then just brute-force the thing.
      (for i :from 2 :to limit)
      (when (= i (digit-power-sum i))
        (summing i)))))

(defun problem-31 ()
  ;; In England the currency is made up of pound, £, and pence, p, and there are
  ;; eight coins in general circulation:
  ;;
  ;; 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
  ;;
  ;; It is possible to make £2 in the following way:
  ;;
  ;; 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
  ;;
  ;; How many different ways can £2 be made using any number of coins?
  (recursively ((amount 200)
                (coins '(200 100 50 20 10 5 2 1)))
    (cond
      ((zerop amount) 1)
      ((minusp amount) 0)
      ((null coins) 0)
      (t (+ (recur (- amount (first coins)) coins)
            (recur amount (rest coins)))))))

(defun problem-32 ()
  ;; We shall say that an n-digit number is pandigital if it makes use of all
  ;; the digits 1 to n exactly once; for example, the 5-digit number, 15234, is
  ;; 1 through 5 pandigital.
  ;;
  ;; The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing
  ;; multiplicand, multiplier, and product is 1 through 9 pandigital.
  ;;
  ;; Find the sum of all products whose multiplicand/multiplier/product identity
  ;; can be written as a 1 through 9 pandigital.
  ;;
  ;; HINT: Some products can be obtained in more than one way so be sure to only
  ;; include it once in your sum.
  (labels ((split (digits a b)
             (values (digits-to-number (subseq digits 0 a))
                     (digits-to-number (subseq digits a (+ a b)))
                     (digits-to-number (subseq digits (+ a b)))))
           (check (digits a b)
             (multiple-value-bind (a b c)
                 (split digits a b)
               (when (= (* a b) c)
                 c))))
    (-<> (gathering
           (map-permutations (lambda (digits)
                               (let ((c1 (check digits 3 2))
                                     (c2 (check digits 4 1)))
                                 (when c1 (gather c1))
                                 (when c2 (gather c2))))
                             #(1 2 3 4 5 6 7 8 9)
                             :copy nil))
      remove-duplicates
      summation)))

(defun problem-33 ()
  ;; The fraction 49/98 is a curious fraction, as an inexperienced mathematician
  ;; in attempting to simplify it may incorrectly believe that 49/98 = 4/8,
  ;; which is correct, is obtained by cancelling the 9s.
  ;;
  ;; We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
  ;;
  ;; There are exactly four non-trivial examples of this type of fraction, less
  ;; than one in value, and containing two digits in the numerator and
  ;; denominator.
  ;;
  ;; If the product of these four fractions is given in its lowest common terms,
  ;; find the value of the denominator.
  (labels ((safe/ (a b)
             (unless (zerop b) (/ a b)))
           (cancel (digit other digits)
             (destructuring-bind (x y) digits
               (remove nil (list (when (= digit x) (safe/ other y))
                                 (when (= digit y) (safe/ other x))))))
           (cancellations (numerator denominator)
             (let ((nd (digits numerator))
                   (dd (digits denominator)))
               (append (cancel (first nd) (second nd) dd)
                       (cancel (second nd) (first nd) dd))))
           (curiousp (numerator denominator)
             (member (/ numerator denominator)
                     (cancellations numerator denominator)))
           (trivialp (numerator denominator)
             (and (dividesp numerator 10)
                  (dividesp denominator 10))))
    (iterate
      (with result = 1)
      (for numerator :from 10 :to 99)
      (iterate (for denominator :from (1+ numerator) :to 99)
               (when (and (curiousp numerator denominator)
                          (not (trivialp numerator denominator)))
                 (mulf result (/ numerator denominator))))
      (finally (return (denominator result))))))

(defun problem-34 ()
  ;; 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
  ;;
  ;; Find the sum of all numbers which are equal to the sum of the factorial of
  ;; their digits.
  ;;
  ;; Note: as 1! = 1 and 2! = 2 are not sums they are not included.
  (iterate
    (for n :from 3 :to 1000000)
    (when (= n (summation (digits n) :key #'factorial))
      (summing n))))

(defun problem-35 ()
  ;; The number, 197, is called a circular prime because all rotations of the
  ;; digits: 197, 971, and 719, are themselves prime.
  ;;
  ;; There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37,
  ;; 71, 73, 79, and 97.
  ;;
  ;; How many circular primes are there below one million?
  (labels ((rotate (n distance)
             (multiple-value-bind (hi lo)
                 (truncate n (expt 10 distance))
               (math lo * 10 ^ #(digits-length hi) + hi)))
           (rotations (n)
             (mapcar (curry #'rotate n) (range 1 (digits-length n))))
           (circular-prime-p (n)
             (every #'primep (rotations n))))
    (iterate (for i :in-vector (sieve 1000000))
             (counting (circular-prime-p i)))))

(defun problem-36 ()
  ;; The decimal number, 585 = 1001001001 (binary), is palindromic in both
  ;; bases.
  ;;
  ;; Find the sum of all numbers, less than one million, which are palindromic
  ;; in base 10 and base 2.
  ;;
  ;; (Please note that the palindromic number, in either base, may not include
  ;; leading zeros.)
  (iterate (for i :from 1 :below 1000000)
           (when (and (palindromep i 10)
                      (palindromep i 2))
             (summing i))))

(defun problem-37 ()
  ;; The number 3797 has an interesting property. Being prime itself, it is
  ;; possible to continuously remove digits from left to right, and remain prime
  ;; at each stage: 3797, 797, 97, and 7. Similarly we can work from right to
  ;; left: 3797, 379, 37, and 3.
  ;;
  ;; Find the sum of the only eleven primes that are both truncatable from left
  ;; to right and right to left.
  ;;
  ;; NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
  (labels ((truncations (n)
             (iterate (for i :from 0 :below (digits-length n))
                      (collect (truncate-number-left n i))
                      (collect (truncate-number-right n i))))
           (truncatablep (n)
             (every #'primep (truncations n))))
    (iterate
      (with count = 0)
      (for i :from 11 :by 2)
      (when (truncatablep i)
        (summing i)
        (incf count))
      (while (< count 11)))))

(defun problem-38 ()
  ;; Take the number 192 and multiply it by each of 1, 2, and 3:
  ;;
  ;;   192 × 1 = 192
  ;;   192 × 2 = 384
  ;;   192 × 3 = 576
  ;;
  ;; By concatenating each product we get the 1 to 9 pandigital, 192384576. We
  ;; will call 192384576 the concatenated product of 192 and (1,2,3)
  ;;
  ;; The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4,
  ;; and 5, giving the pandigital, 918273645, which is the concatenated product
  ;; of 9 and (1,2,3,4,5).
  ;;
  ;; What is the largest 1 to 9 pandigital 9-digit number that can be formed as
  ;; the concatenated product of an integer with (1,2, ... , n) where n > 1?
  (labels ((concatenated-product (number i)
             (apply #'concatenate-integers
                    (iterate (for n :from 1 :to i)
                             (collect (* number n))))))
    (iterate
      main
      (for base :from 1)
      ;; base can't be more than 5 digits long because we have to concatenate at
      ;; least two products of it
      (while (<= (digits-length base) 5))
      (iterate (for n :from 2)
               (for result = (concatenated-product base n))
               ;; result is only ever going to grow larger, so once we pass the
               ;; nine digit mark we can stop
               (while (<= (digits-length result) 9))
               (when (pandigitalp result)
                 (in main (maximizing result)))))))

(defun problem-39 ()
  ;; If p is the perimeter of a right angle triangle with integral length sides,
  ;; {a,b,c}, there are exactly three solutions for p = 120.
  ;;
  ;; {20,48,52}, {24,45,51}, {30,40,50}
  ;;
  ;; For which value of p ≤ 1000, is the number of solutions maximised?
  (iterate
    (for p :from 1 :to 1000)
    (finding p :maximizing (length (pythagorean-triplets-of-perimeter p)))))

(defun problem-40 ()
  ;; An irrational decimal fraction is created by concatenating the positive
  ;; integers:
  ;;
  ;; 0.123456789101112131415161718192021...
  ;;
  ;; It can be seen that the 12th digit of the fractional part is 1.
  ;;
  ;; If dn represents the nth digit of the fractional part, find the value of
  ;; the following expression.
  ;;
  ;; d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000
  (iterate
    top
    (with index = 0)
    (for digits :key #'digits :from 1)
    (iterate (for d :in digits)
             (incf index)
             (when (member index '(1 10 100 1000 10000 100000 1000000))
               (in top (multiplying d))
               (when (= index 1000000)
                 (in top (terminate)))))))

(defun problem-41 ()
  ;; We shall say that an n-digit number is pandigital if it makes use of all
  ;; the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital
  ;; and is also prime.
  ;;
  ;; What is the largest n-digit pandigital prime that exists?
  (iterate
    ;; There's a clever observation which reduces the upper bound from 9 to
    ;; 7 from "gamma" in the forum:
    ;;
    ;; > Note: Nine numbers cannot be done (1+2+3+4+5+6+7+8+9=45 => always dividable by 3)
    ;; > Note: Eight numbers cannot be done (1+2+3+4+5+6+7+8=36 => always dividable by 3)
    (for n :downfrom 7)
    (thereis (apply (nullary #'max)
                    (remove-if-not #'primep (pandigitals 1 n))))))

(defun problem-42 ()
  ;; The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1);
  ;; so the first ten triangle numbers are:
  ;;
  ;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  ;;
  ;; By converting each letter in a word to a number corresponding to its
  ;; alphabetical position and adding these values we form a word value. For
  ;; example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word
  ;; value is a triangle number then we shall call the word a triangle word.
  ;;
  ;; Using words.txt (right click and 'Save Link/Target As...'), a 16K text file
  ;; containing nearly two-thousand common English words, how many are triangle
  ;; words?
  (labels ((word-value (word)
             (summation word :key #'letter-number))
           (triangle-word-p (word)
             (trianglep (word-value word))))
    (count-if #'triangle-word-p (parse-strings-file "data/042-words.txt"))))

(defun problem-43 ()
  ;; The number, 1406357289, is a 0 to 9 pandigital number because it is made up
  ;; of each of the digits 0 to 9 in some order, but it also has a rather
  ;; interesting sub-string divisibility property.
  ;;
  ;; Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we
  ;; note the following:
  ;;
  ;; d2d3d4=406 is divisible by 2
  ;; d3d4d5=063 is divisible by 3
  ;; d4d5d6=635 is divisible by 5
  ;; d5d6d7=357 is divisible by 7
  ;; d6d7d8=572 is divisible by 11
  ;; d7d8d9=728 is divisible by 13
  ;; d8d9d10=289 is divisible by 17
  ;;
  ;; Find the sum of all 0 to 9 pandigital numbers with this property.
  (labels ((extract3 (digits start)
             (digits-to-number (subseq digits start (+ 3 start))))
           (interestingp (n)
             (let ((digits (digits n)))
               ;; eat shit mathematicians, indexes start from zero
               (and (dividesp (extract3 digits 1) 2)
                    (dividesp (extract3 digits 2) 3)
                    (dividesp (extract3 digits 3) 5)
                    (dividesp (extract3 digits 4) 7)
                    (dividesp (extract3 digits 5) 11)
                    (dividesp (extract3 digits 6) 13)
                    (dividesp (extract3 digits 7) 17)))))
    (summation (remove-if-not #'interestingp (pandigitals 0 9)))))

(defun problem-44 ()
  ;; Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first
  ;; ten pentagonal numbers are:
  ;;
  ;; 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
  ;;
  ;; It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
  ;; 70 − 22 = 48, is not pentagonal.
  ;;
  ;; Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
  ;; difference are pentagonal and D = |Pk − Pj| is minimised; what is the value
  ;; of D?
  (flet ((interestingp (px py)
           (and (pentagonp (+ py px))
                (pentagonp (- py px)))))
    (iterate
      (with result = most-positive-fixnum) ; my kingdom for `CL:INFINITY`
      (for y :from 2)
      (for z :from 3)
      (for py = (pentagon y))
      (for pz = (pentagon z))
      (when (>= (- pz py) result)
        (return result))
      (iterate
        (for x :from (1- y) :downto 1)
        (for px = (pentagon x))
        (when (interestingp px py)
          (let ((distance (- py px)))
            (when (< distance result)
              ;; TODO: This isn't quite right, because this is just the FIRST
              ;; number we find -- we haven't guaranteed that it's the SMALLEST
              ;; one we'll ever see.  But it happens to accidentally be the
              ;; correct one, and until I get around to rewriting this with
              ;; priority queues it'll have to do.
              (return-from problem-44 distance)))
          (return))))))

(defun problem-45 ()
  ;; Triangle, pentagonal, and hexagonal numbers are generated by the following
  ;; formulae:
  ;;
  ;; Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
  ;; Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
  ;; Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
  ;;
  ;; It can be verified that T285 = P165 = H143 = 40755.
  ;;
  ;; Find the next triangle number that is also pentagonal and hexagonal.
  (iterate
    (for n :key #'triangle :from 286)
    (finding n :such-that (and (pentagonp n) (hexagonp n)))))

(defun problem-46 ()
  ;; It was proposed by Christian Goldbach that every odd composite number can
  ;; be written as the sum of a prime and twice a square.
  ;;
  ;; 9 = 7 + 2×1²
  ;; 15 = 7 + 2×2²
  ;; 21 = 3 + 2×3²
  ;; 25 = 7 + 2×3²
  ;; 27 = 19 + 2×2²
  ;; 33 = 31 + 2×1²
  ;;
  ;; It turns out that the conjecture was false.
  ;;
  ;; What is the smallest odd composite that cannot be written as the sum of
  ;; a prime and twice a square?
  (flet ((counterexamplep (n)
           (iterate
             (for prime :in-vector (sieve n))
             (never (squarep (/ (- n prime) 2))))))
    (iterate
      (for i :from 1 :by 2)
      (finding i :such-that (and (compositep i)
                                 (counterexamplep i))))))

(defun problem-47 ()
  ;; The first two consecutive numbers to have two distinct prime factors are:
  ;;
  ;; 14 = 2 × 7
  ;; 15 = 3 × 5
  ;;
  ;; The first three consecutive numbers to have three distinct prime factors are:
  ;;
  ;; 644 = 2² × 7 × 23
  ;; 645 = 3 × 5 × 43
  ;; 646 = 2 × 17 × 19
  ;;
  ;; Find the first four consecutive integers to have four distinct prime
  ;; factors each. What is the first of these numbers?
  (flet ((factor-count (n)
           (length (remove-duplicates (prime-factorization n)))))
    (iterate
      (with run = 0)
      (for i :from 1)
      (if (= 4 (factor-count i))
        (incf run)
        (setf run 0))
      (finding (- i 3) :such-that (= run 4)))))

(defun problem-48 ()
  ;; The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.
  ;;
  ;; Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
  (-<> (irange 1 1000)
    (mapcar #'expt <> <>)
    summation
    (mod <> (expt 10 10))))

(defun problem-49 ()
  ;; The arithmetic sequence, 1487, 4817, 8147, in which each of the terms
  ;; increases by 3330, is unusual in two ways: (i) each of the three terms are
  ;; prime, and, (ii) each of the 4-digit numbers are permutations of one
  ;; another.
  ;;
  ;; There are no arithmetic sequences made up of three 1-, 2-, or 3-digit
  ;; primes, exhibiting this property, but there is one other 4-digit increasing
  ;; sequence.
  ;;
  ;; What 12-digit number do you form by concatenating the three terms in this
  ;; sequence?
  (labels ((permutation= (a b)
             (orderless-equal (digits a) (digits b)))
           (length>=3 (list)
             (>= (length list) 3))
           (arithmetic-sequence-p (seq)
             (apply #'= (mapcar (curry #'apply #'-)
                                (n-grams 2 seq))))
           (has-arithmetic-sequence-p (seq)
             (map-combinations
               (lambda (s)
                 (when (arithmetic-sequence-p s)
                   (return-from has-arithmetic-sequence-p s)))
               (sort seq #'<)
               :length 3)
             nil))
    (-<> (primes-in 1000 9999)
      (equivalence-classes #'permutation= <>) ; find all permutation groups
      (remove-if-not #'length>=3 <>) ; make sure they have at leat 3 elements
      (mapcar #'has-arithmetic-sequence-p <>)
      (remove nil <>)
      (remove-if (lambda (s) (= (first s) 1487)) <>) ; remove the example
      first
      (mapcan #'digits <>)
      digits-to-number)))

(defun problem-50 ()
  ;; The prime 41, can be written as the sum of six consecutive primes:
  ;;
  ;; 41 = 2 + 3 + 5 + 7 + 11 + 13
  ;;
  ;; This is the longest sum of consecutive primes that adds to a prime below
  ;; one-hundred.
  ;;
  ;; The longest sum of consecutive primes below one-thousand that adds to
  ;; a prime, contains 21 terms, and is equal to 953.
  ;;
  ;; Which prime, below one-million, can be written as the sum of the most
  ;; consecutive primes?
  (let ((primes (sieve 1000000)))
    (flet ((score (start)
             (iterate
               (with score = 0)
               (with winner = 0)
               (for run :from 1)
               (for prime :in-vector primes :from start)
               (summing prime :into sum)
               (while (< sum 1000000))
               (when (primep sum)
                 (setf score run
                       winner sum))
               (finally (return (values score winner))))))
      (iterate
        (for (values score winner)
             :key #'score :from 0 :below (length primes))
        (finding winner :maximizing score)))))

(defun problem-51 ()
  ;; By replacing the 1st digit of the 2-digit number *3, it turns out that six
  ;; of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.
  ;;
  ;; By replacing the 3rd and 4th digits of 56**3 with the same digit, this
  ;; 5-digit number is the first example having seven primes among the ten
  ;; generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663,
  ;; 56773, and 56993. Consequently 56003, being the first member of this
  ;; family, is the smallest prime with this property.
  ;;
  ;; Find the smallest prime which, by replacing part of the number (not
  ;; necessarily adjacent digits) with the same digit, is part of an eight prime
  ;; value family.
  (labels
      ((patterns (prime)
         (iterate (with size = (digits-length prime))
                  (with indices = (range 0 size))
                  (for i :from 1 :below size)
                  (appending (combinations indices :length i))))
       (apply-pattern-digit (prime pattern new-digit)
         (iterate (with result = (digits prime))
                  (for index :in pattern)
                  (when (and (zerop index) (zerop new-digit))
                    (leave))
                  (setf (nth index result) new-digit)
                  (finally (return (digits-to-number result)))))
       (apply-pattern (prime pattern)
         (iterate (for digit in (irange 0 9))
                  (for result = (apply-pattern-digit prime pattern digit))
                  (when (and result (primep result))
                    (collect result))))
       (apply-patterns (prime)
         (mapcar (curry #'apply-pattern prime) (patterns prime)))
       (winnerp (prime)
         (find-if (curry #'length= 8) (apply-patterns prime))))
    (-<> (iterate (for i :from 3 :by 2)
                  (thereis (and (primep i) (winnerp i))))
      (sort< <>)
      first)))

(defun problem-52 ()
  ;; It can be seen that the number, 125874, and its double, 251748, contain
  ;; exactly the same digits, but in a different order.
  ;;
  ;; Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x,
  ;; contain the same digits.
  (iterate (for i :from 1)
           (for digits = (digits i))
           (finding i :such-that
                    (every (lambda (n)
                             (orderless-equal digits (digits (* n i))))
                           '(2 3 4 5 6)))))

(defun problem-53 ()
  ;; There are exactly ten ways of selecting three from five, 12345:
  ;;
  ;; 123, 124, 125, 134, 135, 145, 234, 235, 245, and 345
  ;;
  ;; In combinatorics, we use the notation, 5C3 = 10.
  ;;
  ;; In general,
  ;;
  ;;   nCr = n! / r!(n−r)!
  ;;
  ;; where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.
  ;;
  ;; It is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.
  ;;
  ;; How many, not necessarily distinct, values of nCr, for 1 ≤ n ≤ 100, are
  ;; greater than one-million?
  (iterate
    main
    (for n :from 1 :to 100)
    (iterate
      (for r :from 1 :to n)
      (for nCr = (binomial-coefficient n r))
      (in main (counting (> nCr 1000000))))))

(defun problem-54 ()
  ;; In the card game poker, a hand consists of five cards and are ranked, from
  ;; lowest to highest, in the following way:
  ;;
  ;; High Card: Highest value card.
  ;; One Pair: Two cards of the same value.
  ;; Two Pairs: Two different pairs.
  ;; Three of a Kind: Three cards of the same value.
  ;; Straight: All cards are consecutive values.
  ;; Flush: All cards of the same suit.
  ;; Full House: Three of a kind and a pair.
  ;; Four of a Kind: Four cards of the same value.
  ;; Straight Flush: All cards are consecutive values of same suit.
  ;; Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.
  ;;
  ;; The cards are valued in the order:
  ;; 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.
  ;;
  ;; If two players have the same ranked hands then the rank made up of the
  ;; highest value wins; for example, a pair of eights beats a pair of fives
  ;; (see example 1 below). But if two ranks tie, for example, both players have
  ;; a pair of queens, then highest cards in each hand are compared (see example
  ;; 4 below); if the highest cards tie then the next highest cards are
  ;; compared, and so on.
  ;;
  ;; The file, poker.txt, contains one-thousand random hands dealt to two
  ;; players. Each line of the file contains ten cards (separated by a single
  ;; space): the first five are Player 1's cards and the last five are Player
  ;; 2's cards. You can assume that all hands are valid (no invalid characters
  ;; or repeated cards), each player's hand is in no specific order, and in each
  ;; hand there is a clear winner.
  ;;
  ;; How many hands does Player 1 win?
  (iterate (for line :in-file "data/054-poker.txt" :using #'read-line)
           (for cards = (mapcar #'euler.poker::parse-card
                                (str:split #\space line)))
           (for p1 = (take 5 cards))
           (for p2 = (drop 5 cards))
           (counting (euler.poker::poker-hand-beats-p p1 p2))))

(defun problem-55 ()
  ;; If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.
  ;;
  ;; Not all numbers produce palindromes so quickly. For example,
  ;;
  ;; 349 + 943 = 1292,
  ;; 1292 + 2921 = 4213
  ;; 4213 + 3124 = 7337
  ;;
  ;; That is, 349 took three iterations to arrive at a palindrome.
  ;;
  ;; Although no one has proved it yet, it is thought that some numbers, like
  ;; 196, never produce a palindrome. A number that never forms a palindrome
  ;; through the reverse and add process is called a Lychrel number. Due to the
  ;; theoretical nature of these numbers, and for the purpose of this problem,
  ;; we shall assume that a number is Lychrel until proven otherwise. In
  ;; addition you are given that for every number below ten-thousand, it will
  ;; either (i) become a palindrome in less than fifty iterations, or, (ii) no
  ;; one, with all the computing power that exists, has managed so far to map it
  ;; to a palindrome. In fact, 10677 is the first number to be shown to require
  ;; over fifty iterations before producing a palindrome:
  ;; 4668731596684224866951378664 (53 iterations, 28-digits).
  ;;
  ;; Surprisingly, there are palindromic numbers that are themselves Lychrel
  ;; numbers; the first example is 4994.
  ;;
  ;; How many Lychrel numbers are there below ten-thousand?
  (labels ((lychrel (n)
             (+ n (reverse-integer n)))
           (lychrelp (n)
             (iterate
               (repeat 50)
               (for i :iterating #'lychrel :seed n)
               (never (palindromep i)))))
    (iterate (for i :from 0 :below 10000)
             (counting (lychrelp i)))))

(defun problem-56 ()
  ;; A googol (10^100) is a massive number: one followed by one-hundred zeros;
  ;; 100^100 is almost unimaginably large: one followed by two-hundred zeros.
  ;; Despite their size, the sum of the digits in each number is only 1.
  ;;
  ;; Considering natural numbers of the form, a^b, where a, b < 100, what is the
  ;; maximum digital sum?
  (iterate (for-nested ((a :from 1 :below 100)
                        (b :from 1 :below 100)))
           (maximizing (digital-sum (expt a b)))))

(defun problem-57 ()
  ;; It is possible to show that the square root of two can be expressed as an
  ;; infinite continued fraction.
  ;;
  ;; √ 2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...
  ;;
  ;; By expanding this for the first four iterations, we get:
  ;;
  ;; 1 + 1/2 = 3/2 = 1.5
  ;; 1 + 1/(2 + 1/2) = 7/5 = 1.4
  ;; 1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
  ;; 1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
  ;;
  ;; The next three expansions are 99/70, 239/169, and 577/408, but the eighth
  ;; expansion, 1393/985, is the first example where the number of digits in the
  ;; numerator exceeds the number of digits in the denominator.
  ;;
  ;; In the first one-thousand expansions, how many fractions contain
  ;; a numerator with more digits than denominator?
  (iterate
    (repeat 1000)
    (for i :initially 1/2 :then (/ (+ 2 i)))
    (for expansion = (1+ i))
    (counting (> (digits-length (numerator expansion))
                 (digits-length (denominator expansion))))))

(defun problem-58 ()
  ;; Starting with 1 and spiralling anticlockwise in the following way, a square
  ;; spiral with side length 7 is formed.
  ;;
  ;; 37 36 35 34 33 32 31
  ;; 38 17 16 15 14 13 30
  ;; 39 18  5  4  3 12 29
  ;; 40 19  6  1  2 11 28
  ;; 41 20  7  8  9 10 27
  ;; 42 21 22 23 24 25 26
  ;; 43 44 45 46 47 48 49
  ;;
  ;; It is interesting to note that the odd squares lie along the bottom right
  ;; diagonal, but what is more interesting is that 8 out of the 13 numbers
  ;; lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.
  ;;
  ;; If one complete new layer is wrapped around the spiral above, a square
  ;; spiral with side length 9 will be formed. If this process is continued,
  ;; what is the side length of the square spiral for which the ratio of primes
  ;; along both diagonals first falls below 10%?
  (labels ((score (value)
             (if (primep value) 1 0))
           (primes-in-layer (size)
             (summation (number-spiral-corners size) :key #'score)))
    (iterate
      (for size :from 3 :by 2)
      (for count :from 5 :by 4)
      (summing (primes-in-layer size) :into primes)
      (for ratio = (/ primes count))
      (finding size :such-that (< ratio 1/10)))))

(defun problem-59 ()
  ;; Each character on a computer is assigned a unique code and the preferred
  ;; standard is ASCII (American Standard Code for Information Interchange).
  ;; For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.
  ;;
  ;; A modern encryption method is to take a text file, convert the bytes to
  ;; ASCII, then XOR each byte with a given value, taken from a secret key. The
  ;; advantage with the XOR function is that using the same encryption key on
  ;; the cipher text, restores the plain text; for example, 65 XOR 42 = 107,
  ;; then 107 XOR 42 = 65.
  ;;
  ;; For unbreakable encryption, the key is the same length as the plain text
  ;; message, and the key is made up of random bytes. The user would keep the
  ;; encrypted message and the encryption key in different locations, and
  ;; without both "halves", it is impossible to decrypt the message.
  ;;
  ;; Unfortunately, this method is impractical for most users, so the modified
  ;; method is to use a password as a key. If the password is shorter than the
  ;; message, which is likely, the key is repeated cyclically throughout the
  ;; message. The balance for this method is using a sufficiently long password
  ;; key for security, but short enough to be memorable.
  ;;
  ;; Your task has been made easy, as the encryption key consists of three lower
  ;; case characters. Using cipher.txt (right click and 'Save Link/Target
  ;; As...'), a file containing the encrypted ASCII codes, and the knowledge
  ;; that the plain text must contain common English words, decrypt the message
  ;; and find the sum of the ASCII values in the original text.
  (let* ((data (-<> "data/059-cipher.txt"
                 read-file-into-string
                 (substitute #\space #\, <>)
                 read-all-from-string))
         (raw-words (-<> "/usr/share/dict/words"
                      read-file-into-string
                      (str:split #\newline <>)
                      (mapcar #'string-downcase <>)))
         (words (make-hash-set :test 'equal :initial-contents raw-words)))
    (labels
        ((stringify (codes)
           (map 'string #'code-char codes))
         (apply-cipher (key)
           (iterate (for number :in data)
                    (for k :in-looping key)
                    (collect (logxor number k))))
         (score-keyword (keyword)
           (-<> (apply-cipher keyword)
             (stringify <>)
             (string-downcase <>)
             (str:words <>)
             (remove-if-not (curry #'hset-contains-p words) <>)
             length))
         (answer (keyword)
           ;; (pr (stringify keyword)) ; keyword is "god", lol
           (summation (apply-cipher keyword))))
      (iterate (for-nested ((a :from (char-code #\a) :to (char-code #\z))
                            (b :from (char-code #\a) :to (char-code #\z))
                            (c :from (char-code #\a) :to (char-code #\z))))
               (for keyword = (list a b c))
               (finding (answer keyword) :maximizing (score-keyword keyword))))))

(defun problem-60 ()
  ;; The primes 3, 7, 109, and 673, are quite remarkable. By taking any two
  ;; primes and concatenating them in any order the result will always be prime.
  ;; For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of
  ;; these four primes, 792, represents the lowest sum for a set of four primes
  ;; with this property.
  ;;
  ;; Find the lowest sum for a set of five primes for which any two primes
  ;; concatenate to produce another prime.
  (labels-memoized ((concatenates-prime-p (a b)
                      (and (primep (concatenate-integers a b))
                           (primep (concatenate-integers b a)))))
    (flet ((satisfiesp (prime primes)
             (every (curry #'concatenates-prime-p prime) primes)))
      (iterate
        main
        ;; 2 can never be part of the winning set, because if you concatenate it
        ;; in the last position you get an even number.
        (with primes = (subseq (sieve 10000) 1))
        (for a :in-vector primes :with-index ai)
        (iterate
          (for b :in-vector primes :with-index bi :from (1+ ai))
          (when (satisfiesp b (list a))
            (iterate
              (for c :in-vector primes :with-index ci :from (1+ bi))
              (when (satisfiesp c (list a b))
                (iterate
                  (for d :in-vector primes :with-index di :from (1+ ci))
                  (when (satisfiesp d (list a b c))
                    (iterate
                      (for e :in-vector primes :from (1+ di))
                      (when (satisfiesp e (list a b c d))
                        (in main (return-from problem-60 (+ a b c d e)))))))))))))))

(defun problem-61 ()
  ;; Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
  ;; are all figurate (polygonal) numbers and are generated by the following
  ;; formulae:
  ;;
  ;; Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
  ;; Square	 	P4,n=n²		  	1, 4, 9, 16, 25, ...
  ;; Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
  ;; Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
  ;; Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
  ;; Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
  ;;
  ;; The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
  ;; interesting properties.
  ;;
  ;; 1. The set is cyclic, in that the last two digits of each number is the
  ;;    first two digits of the next number (including the last number with the
  ;;    first).
  ;; 2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
  ;;    pentagonal (P5,44=2882), is represented by a different number in the
  ;;    set.
  ;; 3. This is the only set of 4-digit numbers with this property.
  ;;
  ;; Find the sum of the only ordered set of six cyclic 4-digit numbers for
  ;; which each polygonal type: triangle, square, pentagonal, hexagonal,
  ;; heptagonal, and octagonal, is represented by a different number in the set.
  (labels ((numbers (generator)
             (iterate (for i :from 1)
                      (for n = (funcall generator i))
                      (while (<= n 9999))
                      (when (>= n 1000)
                        (collect n))))
           (split (number)
             (truncate number 100))
           (prefix (number)
             (when number
               (nth-value 0 (split number))))
           (suffix (number)
             (when number
               (nth-value 1 (split number))))
           (matches (prefix suffix number)
             (multiple-value-bind (p s)
                 (split number)
               (and (or (not prefix)
                        (= prefix p))
                    (or (not suffix)
                        (= suffix s)))))
           (choose (numbers used prefix &optional suffix)
             (-<> numbers
               (remove-if-not (curry #'matches prefix suffix) <>)
               (set-difference <> used)))
           (search-sets (sets)
             (recursively ((sets sets)
                           (path nil))
               (destructuring-bind (set . remaining) sets
                 (if remaining
                   ;; We're somewhere in the middle, recur on any number whose
                   ;; prefix matches the suffix of the previous element.
                   (iterate
                     (for number :in (choose set path (suffix (car path))))
                     (recur remaining (cons number path)))
                   ;; We're on the last set, we need to find a number that fits
                   ;; between the penultimate element and first element to
                   ;; complete the cycle.
                   (when-let*
                       ((init (first (last path)))
                        (prev (car path))
                        (final (choose set path (suffix prev) (prefix init))))
                     (return-from problem-61
                       (summation (reverse (cons (first final) path))))))))))
    (map-permutations #'search-sets
                      (list (numbers #'triangle)
                            (numbers #'square)
                            (numbers #'pentagon)
                            (numbers #'hexagon)
                            (numbers #'heptagon)
                            (numbers #'octagon)))))

(defun problem-62 ()
  ;; The cube, 41063625 (345³), can be permuted to produce two other cubes:
  ;; 56623104 (384³) and 66430125 (405³). In fact, 41063625 is the smallest cube
  ;; which has exactly three permutations of its digits which are also cube.
  ;;
  ;; Find the smallest cube for which exactly five permutations of its digits
  ;; are cube.
  (let ((scores (make-hash-table))) ; canonical-repr => (count . first-cube)
    ;; Basic strategy from [1] but with some bug fixes.  His strategy happens to
    ;; work for this specific case, but could be incorrect for others.
    ;;
    ;; We can't just return as soon as we hit the 5th cubic permutation, because
    ;; what if this cube is actually part of a family of 6?  Instead we need to
    ;; check all other cubes with the same number of digits before making a
    ;; final decision to be sure we don't get fooled.
    ;;
    ;; [1]: http://www.mathblog.dk/project-euler-62-cube-five-permutations/
    (labels ((canonicalize (cube)
               (digits-to-number (sort (digits cube) #'>)))
             (mark (cube)
               (let ((entry (ensure-gethash (canonicalize cube) scores
                                            (cons 0 cube))))
                 (incf (car entry))
                 entry)))
      (iterate
        (with i = 1)
        (with target = 5)
        (with candidates = nil)
        (for limit :initially 10 :then (* 10 limit))
        (iterate
          (for cube = (cube i))
          (while (< cube limit))
          (incf i)
          (for (score . first) = (mark cube))
          (cond ((= score target) (push first candidates))
                ((> score target) (removef candidates first)))) ; tricksy hobbitses
        (thereis (apply (nullary #'min) candidates))))))

(defun problem-63 ()
  ;; The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the
  ;; 9-digit number, 134217728=8^9, is a ninth power.
  ;;
  ;; How many n-digit positive integers exist which are also an nth power?
  (flet ((score (n)
           ;; 10^n will have n+1 digits, so we never need to check beyond that
           (iterate (for base :from 1 :below 10)
                    (for value = (expt base n))
                    (counting (= n (digits-length value)))))
         (find-bound ()
           ;; it's 21.something, but I don't really grok why yet
           (iterate
             (for power :from 1)
             (for maximum-possible-digits = (digits-length (expt 9 power)))
             (while (>= maximum-possible-digits power))
             (finally (return power)))))
    (iterate (for n :from 1 :below (find-bound))
             (summing (score n)))))

(defun problem-67 ()
  ;; By starting at the top of the triangle below and moving to adjacent numbers
  ;; on the row below, the maximum total from top to bottom is 23.
  ;;
  ;;    3
  ;;   7 4
  ;;  2 4 6
  ;; 8 5 9 3
  ;;
  ;; That is, 3 + 7 + 4 + 9 = 23.
  ;;
  ;; Find the maximum total from top to bottom in triangle.txt, a 15K text file
  ;; containing a triangle with one-hundred rows.
  ;;
  ;; NOTE: This is a much more difficult version of Problem 18. It is not
  ;; possible to try every route to solve this problem, as there are 299
  ;; altogether! If you could check one trillion (1012) routes every second it
  ;; would take over twenty billion years to check them all. There is an
  ;; efficient algorithm to solve it.
  (car (reduce (lambda (prev last)
                 (mapcar #'+
                         prev
                         (mapcar #'max last (rest last))))
               (iterate (for line :in-csv-file "data/067-triangle.txt"
                             :delimiter #\space
                             :key #'parse-integer)
                        (collect line))
               :from-end t)))

(defun problem-69 ()
  ;; Euler's Totient function, φ(n) [sometimes called the phi function], is
  ;; used to determine the number of numbers less than n which are relatively
  ;; prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine
  ;; and relatively prime to nine, φ(9)=6.
  ;;
  ;; It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.
  ;;
  ;; Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum.
  (iterate
    ;; Euler's Totient function is defined to be:
    ;;
    ;;   φ(n) = n * Πₓ(1 - 1/x) where x ∈ { prime factors of n }
    ;;
    ;; We're looking for the number n that maximizes f(n) = n/φ(n).
    ;; We can expand this out into:
    ;;
    ;;   _n__ = _______n_______ = _____1_____
    ;;   φ(n)   n * Πₓ(1 - 1/x)   Πₓ(1 - 1/x)
    ;;
    ;; We're trying to MAXMIZE this function, which means we're trying to
    ;; MINIMIZE the denominator: Πₓ(1 - 1/x).
    ;;
    ;; Each term in this product is (1 - 1/x), which means that our goals are:
    ;;
    ;; 1. Have as many terms as possible in the product, because all terms are
    ;;    between 0 and 1, and so decrease the total product when multiplied.
    ;; 2. Prefer smaller values of x, because this minimizes (1 - 1/x), which
    ;;    minimizes the product as a whole.
    ;;
    ;; Note that because we're taking the product over the UNIQUE prime factors
    ;; of n, and because the n itself has canceled out, all numbers with the
    ;; same unique prime factorization will have the same value for n/φ(n).
    ;; For example:
    ;;
    ;;   f(2 * 3 * 5) = f(2² * 3⁸ * 5)
    ;;
    ;; The problem description implies that there is a single number with the
    ;; maximum value below 1,000,000, but even if there were multiple answers,
    ;; it seems reasonable to return the first.  This means that the answer
    ;; we'll be giving will be square-free, because all the larger, squareful
    ;; versions of that factorization would have the same value for f(n).
    ;;
    ;; Not only is it square-free, it must be the product of the first k primes,
    ;; for some number k.  To see why, consider two possible square-free
    ;; numbers:
    ;;
    ;;   (p₁ * p₂ * ... * pₓ)
    ;;   (p₂ * p₃ * ... * pₓ₊₁)
    ;;
    ;; We noted above that smaller values would minimize the product in the
    ;; denominator, thus maximizing the result.  So given two sets of prime
    ;; factors with the same cardinality, we prefer the one with smaller
    ;; numbers.
    ;;
    ;; We also noted above that we want as many numbers as possible, without
    ;; exceeding the limit.
    ;;
    ;; Together we can use these two notes to conclude that we simply want the
    ;; product (p₁ * p₂ * ... * pₓ) for as large an x as possible without
    ;; exceeding the limit!
    (for p :in-primes t)
    (for n :initially 1 :then (* n p))
    (for result :previous n)
    (while (<= n 1000000))
    (finally (return result))))

(defun problem-71 ()
  ;; Consider the fraction, n/d, where n and d are positive integers. If n<d and
  ;; HCF(n,d)=1, it is called a reduced proper fraction.
  ;;
  ;; If we list the set of reduced proper fractions for d ≤ 8 in ascending order
  ;; of size, we get:
  ;;
  ;; 1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3,
  ;; 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
  ;;
  ;; It can be seen that 2/5 is the fraction immediately to the left of 3/7.
  ;;
  ;; By listing the set of reduced proper fractions for d ≤ 1,000,000 in
  ;; ascending order of size, find the numerator of the fraction immediately to
  ;; the left of 3/7.
  (iterate
    ;; We could theoretically iterate through F_1000000 til we find 3/7, but
    ;; we'd have about 130000000000 elements to churn though.  We can do it much
    ;; faster.
    ;;
    ;; Instead, we start by computing F₇ and finding 3/7 and whatever's to the
    ;; left of it.  We can find what's in between these two in the next
    ;; iteration by taking their mediant, then just repeat until we hit the
    ;; limit.
    (with limit = 1000000)
    (with target = 3/7)
    (with guess = (iterate (for x :in-farey-sequence (denominator target))
                           (for px :previous x)
                           (finding px :such-that (= x target))))
    (for next = (mediant guess target))
    (if (> (denominator next) limit)
      (return (numerator guess))
      (setf guess next))))

(defun problem-73 ()
  ;; Consider the fraction, n/d, where n and d are positive integers. If n<d and
  ;; HCF(n,d)=1, it is called a reduced proper fraction.
  ;;
  ;; If we list the set of reduced proper fractions for d ≤ 8 in ascending order
  ;; of size, we get:
  ;;
  ;; 1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3,
  ;; 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
  ;;
  ;; It can be seen that there are 3 fractions between 1/3 and 1/2.
  ;;
  ;; How many fractions lie between 1/3 and 1/2 in the sorted set of reduced
  ;; proper fractions for d ≤ 12,000?
  (iterate
    ;; Just brute force this one with our fancy Farey sequence iterator.
    (for x :in-farey-sequence 12000)
    (while (< x 1/2))
    (counting (< 1/3 x))))

(defun problem-74 ()
  ;; The number 145 is well known for the property that the sum of the factorial
  ;; of its digits is equal to 145:
  ;;
  ;; 1! + 4! + 5! = 1 + 24 + 120 = 145
  ;;
  ;; Perhaps less well known is 169, in that it produces the longest chain of
  ;; numbers that link back to 169; it turns out that there are only three such
  ;; loops that exist:
  ;;
  ;; 169 → 363601 → 1454 → 169
  ;; 871 → 45361 → 871
  ;; 872 → 45362 → 872
  ;;
  ;; It is not difficult to prove that EVERY starting number will eventually get
  ;; stuck in a loop. For example,
  ;;
  ;; 69 → 363600 → 1454 → 169 → 363601 (→ 1454)
  ;; 78 → 45360 → 871 → 45361 (→ 871)
  ;; 540 → 145 (→ 145)
  ;;
  ;; Starting with 69 produces a chain of five non-repeating terms, but the
  ;; longest non-repeating chain with a starting number below one million is
  ;; sixty terms.
  ;;
  ;; How many chains, with a starting number below one million, contain exactly
  ;; sixty non-repeating terms?
  (labels ((digit-factorial (n)
             (summation (digits n) :key #'factorial))
           (term-count (n)
             (iterate (for i :initially n :then (digit-factorial i))
                      (until (member i prev))
                      (collect i :into prev)
                      (counting t))))
    (iterate (for i :from 1 :below 1000000)
             (counting (= 60 (term-count i))))))

(defun problem-79 ()
  ;; A common security method used for online banking is to ask the user for
  ;; three random characters from a passcode. For example, if the passcode was
  ;; 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected
  ;; reply would be: 317.
  ;;
  ;; The text file, keylog.txt, contains fifty successful login attempts.
  ;;
  ;; Given that the three characters are always asked for in order, analyse
  ;; the file so as to determine the shortest possible secret passcode of
  ;; unknown length.
  (let ((attempts (-<> "data/079-keylog.txt"
                    read-all-from-file
                    (mapcar #'digits <>)
                    (mapcar (rcurry #'coerce 'vector) <>))))
    ;; Everyone in the forum is assuming that there are no duplicate digits in
    ;; the passcode, but as someone pointed out this isn't necessarily a safe
    ;; assumption.  If you have attempts of (12 21) then the shortest passcode
    ;; would be 121.  So we'll do things the safe way and just brute force it.
    (iterate (for passcode :from 1)
             (finding passcode :such-that
                      (every (rcurry #'subsequencep (digits passcode))
                             attempts)))))

(defun problem-81 ()
  ;; In the 5 by 5 matrix below, the minimal path sum from the top left to the
  ;; bottom right, by only moving to the right and down, is indicated in bold
  ;; red and is equal to 2427.
  ;;
  ;; Find the minimal path sum, in matrix.txt, a 31K text file containing a 80
  ;; by 80 matrix, from the top left to the bottom right by only moving right
  ;; and down.
  (let* ((data (convert-to-multidimensional-array
                 (iterate
                   (for line :in-csv-file "data/081-matrix.txt"
                        :key #'parse-integer)
                   (collect line))))
         (rows (array-dimension data 0))
         (cols (array-dimension data 1))
         (last-row (1- rows))
         (last-col (1- cols))
         (down (vec2 0 1))
         (right (vec2 1 0))
         (top-left (vec2 0 0))
         (bottom-right (vec2 last-col last-row))
         (minimum-value (iterate (for value :in-array data)
                                 (minimizing value))))
    (labels ((value-at (point)
               (aref data (vy point) (vx point)))
             (neighbors (point)
               (remove nil (list (when (< (vx point) last-col)
                                   (vec2+ point right))
                                 (when (< (vy point) last-row)
                                   (vec2+ point down)))))
             (remaining-moves (point)
               (+ (- cols (vx point))
                  (- rows (vy point))))
             (heuristic (point)
               (* minimum-value (remaining-moves point)))
             (cost (prev point)
               (declare (ignore prev))
               (value-at point)))
      (summation (astar :start top-left
                        :neighbors #'neighbors
                        :goalp (curry #'vec2= bottom-right)
                        :cost #'cost
                        :heuristic #'heuristic
                        :test #'equalp)
                 :key #'value-at))))

(defun problem-82 ()
  ;; NOTE: This problem is a more challenging version of Problem 81.
  ;;
  ;; The minimal path sum in the 5 by 5 matrix below, by starting in any cell in
  ;; the left column and finishing in any cell in the right column, and only
  ;; moving up, down, and right, is indicated in red and bold; the sum is equal
  ;; to 994.
  ;;
  ;; Find the minimal path sum, in matrix.txt, a 31K text file containing a 80
  ;; by 80 matrix, from the left column to the right column.
  (let* ((data (convert-to-multidimensional-array
                 (iterate
                   (for line :in-csv-file "data/082-matrix.txt"
                        :key #'parse-integer)
                   (collect line))))
         (rows (array-dimension data 0))
         (cols (array-dimension data 1))
         (last-row (1- rows))
         (last-col (1- cols))
         (up (vec2 0 -1))
         (down (vec2 0 1))
         (right (vec2 1 0))
         (minimum-value (iterate (for value :in-array data)
                                 (minimizing value))))
    ;; We can still use A*, we just need to do a little hack to allow it to
    ;; choose anything in the first column as a starting state: we'll make the
    ;; starting state NIL and make everything in the first column its neighbors.
    (labels ((value-at (point)
               (aref data (vy point) (vx point)))
             (neighbors (point)
               (if (null point)
                 (mapcar (curry #'vec2 0) (range 0 rows))
                 (remove nil (list (when (< (vx point) last-col)
                                     (vec2+ point right))
                                   (when (< 0 (vy point))
                                     (vec2+ point up))
                                   (when (< (vy point) last-row)
                                     (vec2+ point down))))))
             (remaining-moves (point)
               (+ (- cols (vx point))
                  (- rows (vy point))))
             (goalp (point)
               (and point (= last-col (vx point))))
             (heuristic (point)
               (* minimum-value (remaining-moves point)))
             (cost (prev point)
               (declare (ignore prev))
               (value-at point)))
      (summation (rest (astar :start nil
                              :neighbors #'neighbors
                              :goalp #'goalp
                              :cost #'cost
                              :heuristic #'heuristic
                              :test #'equalp))
                 :key #'value-at))))

(defun problem-92 ()
  ;; A number chain is created by continuously adding the square of the digits
  ;; in a number to form a new number until it has been seen before.
  ;;
  ;; For example,
  ;; 44 → 32 → 13 → 10 → 1 → 1
  ;; 85 → 89 → 145 → 42 → 20 → 4 → 16 → 37 → 58 → 89
  ;;
  ;; Therefore any chain that arrives at 1 or 89 will become stuck in an
  ;; endless loop. What is most amazing is that EVERY starting number will
  ;; eventually arrive at 1 or 89.
  ;;
  ;; How many starting numbers below ten million will arrive at 89?
  (labels ((square-chain-end (i)
             (if (or (= 1 i) (= 89 i))
               i
               (square-chain-end
                 (iterate (for d :in-digits-of i)
                          (summing (square d)))))))
    (iterate (for i :from 1 :below 10000000)
             (counting (= 89 (square-chain-end i))))))

(defun problem-97 ()
  ;; The first known prime found to exceed one million digits was discovered in
  ;; 1999, and is a Mersenne prime of the form 2^6972593−1; it contains exactly
  ;; 2,098,960 digits. Subsequently other Mersenne primes, of the form 2^p−1,
  ;; have been found which contain more digits.
  ;;
  ;; However, in 2004 there was found a massive non-Mersenne prime which
  ;; contains 2,357,207 digits: 28433×2^7830457+1.
  ;;
  ;; Find the last ten digits of this prime number.
  (-<> 2
    (expt <> 7830457)
    (* 28433 <>)
    1+
    (mod <> (expt 10 10))))

(defun problem-99 ()
  ;; Comparing two numbers written in index form like 2^11 and 3^7 is not
  ;; difficult, as any calculator would confirm that 2^11 = 2048 < 3^7 = 2187.
  ;;
  ;; However, confirming that 632382^518061 > 519432^525806 would be much more
  ;; difficult, as both numbers contain over three million digits.
  ;;
  ;; Using base_exp.txt (right click and 'Save Link/Target As...'), a 22K text
  ;; file containing one thousand lines with a base/exponent pair on each line,
  ;; determine which line number has the greatest numerical value.
  ;;
  ;; NOTE: The first two lines in the file represent the numbers in the example
  ;; given above.
  (iterate
    (for line-number :from 1)
    ;; Lisp can compute the exponents, but it takes a really long time.  We can
    ;; avoid having to compute the full values using:
    ;;
    ;;   log(base^expt) = expt * log(base)
    ;;
    ;; Taking the log of each number preserves their ordering, so we can compare
    ;; the results and still be correct.
    (for (base exponent) :in-csv-file "data/099-exponents.txt"
         :key #'parse-integer)
    (finding line-number :maximizing (* exponent (log base)))))

(defun problem-102 ()
  ;; Three distinct points are plotted at random on a Cartesian plane, for which
  ;; -1000 ≤ x, y ≤ 1000, such that a triangle is formed.
  ;;
  ;; Consider the following two triangles:
  ;;
  ;;     A(-340,495), B(-153,-910), C(835,-947)
  ;;
  ;;     X(-175,41), Y(-421,-714), Z(574,-645)
  ;;
  ;; It can be verified that triangle ABC contains the origin, whereas triangle
  ;; XYZ does not.
  ;;
  ;; Using triangles.txt (right click and 'Save Link/Target As...'), a 27K text
  ;; file containing the co-ordinates of one thousand "random" triangles, find
  ;; the number of triangles for which the interior contains the origin.
  ;;
  ;; NOTE: The first two examples in the file represent the triangles in the
  ;; example given above.
  (flet ((parse-file (file)
           (iterate
             (for (ax ay bx by cx cy) :in-csv-file file :key #'parse-integer)
             (collect (list (vec2 ax ay)
                            (vec2 bx by)
                            (vec2 cx cy)))))
         (check-triangle (a b c)
           ;; A point is within a triangle if its barycentric coordinates
           ;; (with respect to that triangle) are all within 0 to 1.
           (multiple-value-bind (u v w)
               (barycentric a b c (vec2 0 0))
             (and (<= 0 u 1)
                  (<= 0 v 1)
                  (<= 0 w 1)))))
    (iterate (for (a b c) :in (parse-file "data/102-triangles.txt"))
             (counting (check-triangle a b c)))))

(defun problem-112 ()
  ;; Working from left-to-right if no digit is exceeded by the digit to its left
  ;; it is called an increasing number; for example, 134468.
  ;;
  ;; Similarly if no digit is exceeded by the digit to its right it is called
  ;; a decreasing number; for example, 66420.
  ;;
  ;; We shall call a positive integer that is neither increasing nor decreasing
  ;; a "bouncy" number; for example, 155349.
  ;;
  ;; Clearly there cannot be any bouncy numbers below one-hundred, but just over
  ;; half of the numbers below one-thousand (525) are bouncy. In fact, the least
  ;; number for which the proportion of bouncy numbers first reaches 50% is 538.
  ;;
  ;; Surprisingly, bouncy numbers become more and more common and by the time we
  ;; reach 21780 the proportion of bouncy numbers is equal to 90%.
  ;;
  ;; Find the least number for which the proportion of bouncy numbers is exactly
  ;; 99%.
  (flet ((bouncyp (integer)
           (iterate
             (for digit :in-digits-of integer)
             (for prev :previous digit)
             (unless-first-time
               (oring (< prev digit) :into increasing)
               (oring (> prev digit) :into decreasing))
             (thereis (and increasing decreasing)))))
    (iterate
      (for i :from 1)
      (for total :from 1)
      (counting (bouncyp i) :into bouncy)
      (finding i :such-that (= (/ bouncy total) 99/100)))))

(defun problem-145 ()
  ;; Some positive integers n have the property that the sum [ n + reverse(n) ]
  ;; consists entirely of odd (decimal) digits. For instance, 36 + 63 = 99 and
  ;; 409 + 904 = 1313. We will call such numbers reversible; so 36, 63, 409, and
  ;; 904 are reversible. Leading zeroes are not allowed in either n or
  ;; reverse(n).
  ;;
  ;; There are 120 reversible numbers below one-thousand.
  ;;
  ;; How many reversible numbers are there below one-billion (10^9)?
  (flet ((reversiblep (n)
           (let ((reversed (reverse-integer n)))
             (values (unless (zerop (digit 0 n))
                       (every #'oddp (digits (+ n reversed))))
                     reversed))))
    (iterate
      ;; TODO: improve this one
      ;; (with limit = 1000000000) there are no 9-digit reversible numbers...
      (with limit = 100000000)
      (with done = (make-array limit :element-type 'bit :initial-element 0))
      (for i :from 1 :below limit)
      (unless (= 1 (aref done i))
        (for (values reversible j) = (reversiblep i))
        (setf (aref done j) 1)
        (when reversible
          (summing (if (= i j) 1 2)))))))

(defun problem-206 ()
  (declare (optimize speed))
  ;; Find the unique positive integer whose square has the form
  ;; 1_2_3_4_5_6_7_8_9_0, where each “_” is a single digit.
  (flet ((targetp (i)
           (declare (type fixnum i))
           (and (= 0 (nth-digit 0 i))
                (= 9 (nth-digit 2 i))
                (= 8 (nth-digit 4 i))
                (= 7 (nth-digit 6 i))
                (= 6 (nth-digit 8 i))
                (= 5 (nth-digit 10 i))
                (= 4 (nth-digit 12 i))
                (= 3 (nth-digit 14 i))
                (= 2 (nth-digit 16 i))
                (= 1 (nth-digit 18 i)))))
    ;; The square ends with a 0, which means the original number must also end
    ;; in 0.  This means the original number has to be divisible by 10, so we
    ;; can take bigger steps.
    (iterate
      (with min = (round-to (sqrt 1020304050607080900) 10))
      (with max = (floor (sqrt 1929394959697989990)))
      (for i :from min :to max :by 10)
      (finding i :such-that (targetp (square i))))))

(defun problem-315 ()
  ;; Full description too long, see https://projecteuler.net/problem=315
  (labels ((digit-to-bits (n)
             ;; We'll represent the lit segments of a clock as bits:
             ;;
             ;;  -      1
             ;; | |    2 3
             ;;  -      0
             ;; | |    4 5
             ;;  -      6
             (case n
               ;;   6543210
               (0 #b1111110)
               (1 #b0101000)
               (2 #b1011011)
               (3 #b1101011)
               (4 #b0101101)
               (5 #b1100111)
               (6 #b1110111)
               (7 #b0101110)
               (8 #b1111111)
               (9 #b1101111)
               (t #b0000000)))
           (transition-sam (previous current)
             ;; Sam turns off everything lit in the previous number, and turns
             ;; on everything lit in the current one.
             (let ((p (digit-to-bits previous))
                   (c (digit-to-bits current)))
               (+ (logcount p)
                  (logcount c))))
           (transition-max (previous current)
             ;; Max only turns off the things that need to be turned off, and
             ;; only turns on the things that need to be turned on.  This is
             ;; just xor.
             (let ((p (digit-to-bits previous))
                   (c (digit-to-bits current)))
               (logcount (logxor p c))))
           (transition (transition-function previous-digits current-digits)
             ;; The new digits will probably be shorter than the old digits.
             (summation (mapcar-long transition-function nil
                                     previous-digits current-digits)))
           (run-clock (seed)
             (iterate
               (for current :in-list (mapcar (rcurry #'digits :from-end t)
                                             (digital-roots seed))
                    :finally nil)
               (for prev :previous current :initially nil)
               (summing (transition #'transition-sam prev current) :into sam)
               (summing (transition #'transition-max prev current) :into max)
               (finally (return (values sam max))))))
    (iterate (for n :from (expt 10 7) :to (* 2 (expt 10 7)))
             (when (primep n)
               (summing (multiple-value-call #'- (run-clock n)))))))

(defun problem-323 ()
  ;; Let y0, y1, y2,... be a sequence of random unsigned 32 bit integers (i.e.
  ;; 0 ≤ yi < 2^32, every value equally likely).
  ;;
  ;; For the sequence xi the following recursion is given:
  ;;
  ;;     x0 = 0 and
  ;;     xi = x_i-1 | y_i-1, for i > 0. (| is the bitwise-OR operator)
  ;;
  ;; It can be seen that eventually there will be an index N such that
  ;; xi = 2^32 - 1 (a bit-pattern of all ones) for all i ≥ N.
  ;;
  ;; Find the expected value of N.
  ;;
  ;; Give your answer rounded to 10 digits after the decimal point.
  (labels
      ;; Assuming a perfectly uniform random number generator, each bit of each
      ;; randomly-generated bit will be independent of the others.  So we can
      ;; treat this problem as a set of 32 independent Bernoulli trials, and are
      ;; trying to find the expected numbers of iterations required for all 32
      ;; trials to succeed at least once.
      ;;
      ;; We can start by actually doing the experiments.  This will be
      ;; impractical for large numbers of parallel trials, but gives us a way to
      ;; sanity check our work later.
      ((empirical-test ()
         (iterate (counting t) (until (randomp))))
       (empirical-tests (runners)
         (iterate (repeat runners)
                  (maximizing (empirical-test))))
       (run-empirical-tests (runners)
         (coerce (iterate (repeat 1000000)
                          (averaging (empirical-tests runners)))
                 'double-float))
       ;; Running the experiments for 32 parallel trials enough times to get 10
       ;; digits of accuracy is computationally infeasible, so we'll need to use
       ;; some math.
       ;;
       ;; The expected value the problem is looking for is:
       ;;
       ;;     (1 * P(finishing on turn 1)) +
       ;;     (2 * P(finishing on turn 2)) +
       ;;                  ...             +
       ;;     (n * P(finishing on turn n))
       ;;
       ;; We solve this by finding a closed form solution for P(finishing on
       ;; turn n), and then adding enough terms to get our ten digits of
       ;; precision.
       (probability-of-finishing-by (runners n)
         ;; The probability of a single run finishing on or before turn N is
         ;; given by the cumulative distribution function of the geometric
         ;; distribution.
         ;;
         ;; Because all the trials are independent, we can multiply their
         ;; probabilities to find the probability for the group as a whole.
         (expt (geometric-cdf 0.5d0 n) runners))
       (probability-of-finishing-on (runners n)
         ;; The probability of finishing EXACTLY on turn N can be found by
         ;; taking N's cumulative probability and subtracting N-1's cumulative
         ;; probability.
         (- (probability-of-finishing-by runners n)
            (probability-of-finishing-by runners (1- n))))
       (expected-value (runners)
         (iterate
           (for n :from 1 :below 1000)
           (for prob = (probability-of-finishing-on runners n))
           (summing (* n prob))))
       (sanity-check (runners)
         (assert (= (round-decimal (run-empirical-tests runners) 1)
                    (round-decimal (expected-value runners) 1)))))
    (when nil
      (iterate (for i :from 1 :to 6)
               (sanity-check i)))
    (round-decimal (expected-value 32) 10)))

(defun problem-345 ()
  ;; We define the Matrix Sum of a matrix as the maximum sum of matrix elements
  ;; with each element being the only one in his row and column. For example,
  ;; the Matrix Sum of the matrix below equals 3315 ( = 863 + 383 + 343 + 959
  ;; + 767):
  ;;
  ;;   7  53 183 439 863
  ;; 497 383 563  79 973
  ;; 287  63 343 169 583
  ;; 627 343 773 959 943
  ;; 767 473 103 699 303
  ;;
  ;; Find the Matrix Sum of: ...
  (let ((matrix
          (copy-array
            #2a((  7  53 183 439 863 497 383 563  79 973 287  63 343 169 583)
                (627 343 773 959 943 767 473 103 699 303 957 703 583 639 913)
                (447 283 463  29  23 487 463 993 119 883 327 493 423 159 743)
                (217 623   3 399 853 407 103 983  89 463 290 516 212 462 350)
                (960 376 682 962 300 780 486 502 912 800 250 346 172 812 350)
                (870 456 192 162 593 473 915  45 989 873 823 965 425 329 803)
                (973 965 905 919 133 673 665 235 509 613 673 815 165 992 326)
                (322 148 972 962 286 255 941 541 265 323 925 281 601  95 973)
                (445 721  11 525 473  65 511 164 138 672  18 428 154 448 848)
                (414 456 310 312 798 104 566 520 302 248 694 976 430 392 198)
                (184 829 373 181 631 101 969 613 840 740 778 458 284 760 390)
                (821 461 843 513  17 901 711 993 293 157 274  94 192 156 574)
                ( 34 124   4 878 450 476 712 914 838 669 875 299 823 329 699)
                (815 559 813 459 522 788 168 586 966 232 308 833 251 631 107)
                (813 883 451 509 615  77 281 613 459 205 380 274 302  35 805)))))
    ;; The hungarian algorithm finds a minimal assignment, but we want a maximal
    ;; one, so we'll just negate all the values and flip the sign at the end.
    (do-array (val matrix)
      (negatef val))
    (iterate
      (for (row . col) :in (euler.hungarian:find-minimal-assignment matrix))
      (summing (- (aref matrix row col))))))

(defun problem-346 ()
  ;; The number 7 is special, because 7 is 111 written in base 2, and 11 written
  ;; in base 6 (i.e. 7_10 = 11_6 = 111_2). In other words, 7 is a repunit in at
  ;; least two bases b > 1.
  ;;
  ;; We shall call a positive integer with this property a strong repunit. It
  ;; can be verified that there are 8 strong repunits below 50:
  ;; {1,7,13,15,21,31,40,43}.  Furthermore, the sum of all strong repunits below
  ;; 1000 equals 15864.
  ;;
  ;; Find the sum of all strong repunits below 10^12.
  (iterate
    ;; Let's start with a few observations.  First, 1 is a repunit in ALL bases,
    ;; and 2 isn't a repunit in any base.
    ;;
    ;; Next, EVERY number `n` greater than 2 is a repunit in base `n - 1`,
    ;; because it will be `11` in that base.  So every number already fulfills
    ;; half the requirements of the problem.  This means we only need to find
    ;; and sum all the numbers are repunits in at least one more base, and
    ;; they'll be of the form `11[1]+` in that base.
    ;;
    ;; Instead of iterating through each number trying to search for a base that
    ;; it happens to be a repunit in, it's faster if we iterate through the
    ;; possible BASES instead and generate all their repunits below the limit.
    ;; Observe how new repunits can be iteratively formed for a given base `b`:
    ;;
    ;;   R₁ = 1    = 1
    ;;   R₂ = 11   = 1 + b¹
    ;;   R₃ = 111  = 1 + b¹ + b²
    ;;   R₄ = 1111 = 1 + b¹ + b² + b³
    ;;   ...
    ;;
    ;; We can use a set to store the results to avoid overcounting numbers that
    ;; are repunits in more than two bases.
    (with limit = (expt 10 12))
    (with strong-repunits = (make-hash-set :initial-contents '(1)))
    (for base :from 2 :to (sqrt limit))
    (iterate
      ;; To check a particular base we'll start at number 111 in that base,
      ;; because we've already accounted for 1 and 11 in our previous
      ;; assumptions.
      ;;
      ;; This is why we only iterate up to √b in the outer loop: the first
      ;; number we're going to be checking is `111 = 1 + b¹ + b²`, and so any
      ;; base higher than √b would immediately exceed the limit.  We could
      ;; probably narrow the range a bit further, but it's plenty fast already.
      (for n :first (+ 1 base (expt base 2)) :then (+ 1 (* base n)))
      (while (< n limit))
      (hset-insert! strong-repunits n))
    (finally (return (hset-reduce strong-repunits #'+)))))

(defun problem-357 ()
  ;; Consider the divisors of 30: 1,2,3,5,6,10,15,30.  It can be seen that for
  ;; every divisor d of 30, d+30/d is prime.
  ;;
  ;; Find the sum of all positive integers n not exceeding 100 000 000 such that
  ;; for every divisor d of n, d+n/d is prime.
  (labels ((check-divisor (n d)
             (primep (+ d (truncate n d))))
           (prime-generating-integer-p (n)
             (declare (optimize speed)
                      (type fixnum n)
                      (inline divisors-up-to-square-root))
             (every (curry #'check-divisor n)
                    (divisors-up-to-square-root n))))
    ;; Observations about the candidate numbers, from various places around the
    ;; web, with my notes for humans:
    ;;
    ;; * n+1 must be prime.
    ;;
    ;;   Every number has 1 has a factor, which means one of
    ;;   the tests will be to see if 1+(n/1) is prime.
    ;;
    ;; * n must be even (except the edge case of 1).
    ;;
    ;;   We know this because n+1 must be prime, and therefore odd, so n itself
    ;;   must be even.
    ;;
    ;; * 2+(n/2) must be prime.
    ;;
    ;;   Because all candidates are even, they all have 2 as a divisor (see
    ;;   above), and so we can do this check before finding all the divisors.
    ;;
    ;; * n must be squarefree.
    ;;
    ;;   Consider when n is squareful: then there is some prime that occurs more
    ;;   than once in its factorization.  Choosing this prime as the divisor for
    ;;   the formula gives us d+(n/d).  We know that n/d will still be divisible
    ;;   by d, because we chose a d that occurs multiple times in the
    ;;   factorization.  Obviously d itself is divisible by d.  Thus our entire
    ;;   formula is divisible by d, and so not prime.
    ;;
    ;;   Unfortunately this doesn't really help us much, because there's no
    ;;   efficient way to tell if a number is squarefree (see
    ;;   http://mathworld.wolfram.com/Squarefree.html).
    ;;
    ;; * We only have to check d <= sqrt(n).
    ;;
    ;;   For each divisor d of n we know there's a twin divisor d' such that
    ;;   d * d' = n (that's what it MEANS for d to be a divisor of n).
    ;;
    ;;   If we plug d into the formula we have d + n/d.
    ;;   We know that n/d = d', and so we have d + d'.
    ;;
    ;;   If we plug d' into the formula we have d' + n/d'.
    ;;   We know that n/d' = d, and so we have d' + d.
    ;;
    ;;   This means that plugging d or d' into the formula both result in the
    ;;   same number, so we only need to bother checking one of them.
    (1+ (iterate
          ;; edge case: skip 2 (candidiate 1), we'll add it at the end
          (for prime :in-vector (sieve (1+ 100000000)) :from 1)
          (for candidate = (1- prime))
          (when (and (check-divisor candidate 2)
                     (prime-generating-integer-p candidate))
            (summing candidate))))))

(defun problem-387 ()
  ;; A Harshad or Niven number is a number that is divisible by the sum of its digits.
  ;; 201 is a Harshad number because it is divisible by 3 (the sum of its digits.)
  ;; When we truncate the last digit from 201, we get 20, which is a Harshad number.
  ;; When we truncate the last digit from 20, we get 2, which is also a Harshad number.
  ;;
  ;; Let's call a Harshad number that, while recursively truncating the last
  ;; digit, always results in a Harshad number a right truncatable Harshad
  ;; number.
  ;;
  ;; Also: 201/3=67 which is prime.
  ;; Let's call a Harshad number that, when divided by the sum of its digits,
  ;; results in a prime a strong Harshad number.
  ;;
  ;; Now take the number 2011 which is prime.  When we truncate the last digit
  ;; from it we get 201, a strong Harshad number that is also right truncatable.
  ;; Let's call such primes strong, right truncatable Harshad primes.
  ;;
  ;; You are given that the sum of the strong, right truncatable Harshad primes
  ;; less than 10000 is 90619.
  ;;
  ;; Find the sum of the strong, right truncatable Harshad primes less than
  ;; 10^14.
  (labels ((harshadp (number)
             (dividesp number (digital-sum number)))
           (strong-harshad-p (number)
             (multiple-value-bind (result remainder)
                 (truncate number (digital-sum number))
               (and (zerop remainder)
                    (primep result))))
           (right-truncatable-harshad-p (number)
             (iterate (for i :first number :then (truncate-number-right i 1))
                      (until (zerop i))
                      (always (harshadp i))))
           (strong-right-truncatable-harshad-p (number)
             ;; A "strong, right-truncatable Harshad number" is a number that is
             ;; both a strong Harshad number and a right-truncatable Harshad
             ;; number.  Note that after the first truncation the rest no longer
             ;; need to be strong -- it's enough for this number itself to be
             ;; strong.
             (and (strong-harshad-p number)
                  (right-truncatable-harshad-p number)))
           (strong-right-truncatable-harshad-prime-p (number)
             ;; A "strong, right-truncatable Harshad prime" is not itself
             ;; a Harshad number!  Prime numbers can never be Harshad numbers
             ;; (except for single-digit numbers), because otherwise they would
             ;; have to have a divisor (the sum of their digits) (thanks
             ;; lebossle).
             ;;
             ;; What we're looking for here are prime numbers for whom we can
             ;; chop off the right digit and get strong, truncatable Harshad
             ;; numbers.
             (and (primep number)
                  (strong-right-truncatable-harshad-p
                    (truncate-number-right number 1))))
           (harshad-total (limit)
             ;; Instead of trying to check every number below 10^14 for
             ;; primality, we can recursively build right-truncatable Harshad
             ;; numbers until we hit a non-Harshad (or the limit), then test
             ;; that for strong-right-truncatable-harshad-prime-ness.
             ;;
             ;; If we work from the left (starting at the high order digits)
             ;; and make sure the number is a Harshad number at each step,
             ;; we automatically ensure it's right truncatable.
             (recursively ((n 0))
               (cond
                 ((>= n limit) 0)
                 ((or (zerop n) (harshadp n))
                  (iterate (for digit :from (if (zerop n) 1 0) :to 9)
                           (summing (recur (append-digit digit n)))))
                 ((strong-right-truncatable-harshad-prime-p n) n)
                 (t 0)))))
    (harshad-total (expt 10 14))))


;;;; Tests --------------------------------------------------------------------
(test p10 (is (= 142913828922 (problem-10))))
(test p11 (is (= 70600674 (problem-11))))
(test p12 (is (= 76576500 (problem-12))))
(test p13 (is (= 5537376230 (problem-13))))
(test p14 (is (= 837799 (problem-14))))
(test p15 (is (= 137846528820 (problem-15))))
(test p16 (is (= 1366 (problem-16))))
(test p17 (is (= 21124 (problem-17))))
(test p18 (is (= 1074 (problem-18))))
(test p19 (is (= 171 (problem-19))))
(test p20 (is (= 648 (problem-20))))
(test p21 (is (= 31626 (problem-21))))
(test p22 (is (= 871198282 (problem-22))))
(test p23 (is (= 4179871 (problem-23))))
(test p24 (is (= 2783915460 (problem-24))))
(test p25 (is (= 4782 (problem-25))))
(test p26 (is (= 983 (problem-26))))
(test p27 (is (= -59231 (problem-27))))
(test p28 (is (= 669171001 (problem-28))))
(test p29 (is (= 9183 (problem-29))))
(test p30 (is (= 443839 (problem-30))))
(test p31 (is (= 73682 (problem-31))))
(test p32 (is (= 45228 (problem-32))))
(test p33 (is (= 100 (problem-33))))
(test p34 (is (= 40730 (problem-34))))
(test p35 (is (= 55 (problem-35))))
(test p36 (is (= 872187 (problem-36))))
(test p37 (is (= 748317 (problem-37))))
(test p38 (is (= 932718654 (problem-38))))
(test p39 (is (= 840 (problem-39))))
(test p40 (is (= 210 (problem-40))))
(test p41 (is (= 7652413 (problem-41))))
(test p42 (is (= 162 (problem-42))))
(test p43 (is (= 16695334890 (problem-43))))
(test p44 (is (= 5482660 (problem-44))))
(test p45 (is (= 1533776805 (problem-45))))
(test p46 (is (= 5777 (problem-46))))
(test p47 (is (= 134043 (problem-47))))
(test p48 (is (= 9110846700 (problem-48))))
(test p49 (is (= 296962999629 (problem-49))))
(test p50 (is (= 997651 (problem-50))))
(test p51 (is (= 121313 (problem-51))))
(test p52 (is (= 142857 (problem-52))))
(test p53 (is (= 4075 (problem-53))))
(test p54 (is (= 376 (problem-54))))
(test p55 (is (= 249 (problem-55))))
(test p56 (is (= 972 (problem-56))))
(test p57 (is (= 153 (problem-57))))
(test p58 (is (= 26241 (problem-58))))
(test p59 (is (= 107359 (problem-59))))
(test p60 (is (= 26033 (problem-60))))
(test p61 (is (= 28684 (problem-61))))
(test p62 (is (= 127035954683 (problem-62))))
(test p63 (is (= 49 (problem-63))))
(test p67 (is (= 7273 (problem-67))))
(test p69 (is (= 510510 (problem-69))))
(test p71 (is (= 428570 (problem-71))))
(test p73 (is (= 7295372 (problem-73))))
(test p74 (is (= 402 (problem-74))))
(test p79 (is (= 73162890 (problem-79))))
(test p81 (is (= 427337 (problem-81))))
(test p82 (is (= 260324 (problem-82))))
(test p92 (is (= 8581146 (problem-92))))
(test p97 (is (= 8739992577 (problem-97))))
(test p99 (is (= 709 (problem-99))))
(test p102 (is (= 228 (problem-102))))
(test p145 (is (= 608720 (problem-145))))
(test p206 (is (= 1389019170 (problem-206))))
(test p315 (is (= 13625242 (problem-315))))
(test p323 (is (= 6.3551758451d0 (problem-323))))
(test p345 (is (= 13938 (problem-345))))
(test p346 (is (= 336108797689259276 (problem-346))))
(test p357 (is (= 1739023853137 (problem-357))))
(test p387 (is (= 696067597313468 (problem-387))))


(defun run-tests ()
  (1am:run))
